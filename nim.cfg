# Arraymancer compilation flag config

#### From default nim.cfg, somehow it's not taken into account with a custom nim.cfg
@if release or quick:
  obj_checks:off
  field_checks:off
  range_checks:off
  bound_checks:off
  overflow_checks:off
  assertions:off
  stacktrace:off
  linetrace:off
  debugger:off
  line_dir:off
  dead_code_elim:on
@end

@if release:
  opt:speed
@end

# Configuration for GCC compiler:
gcc.options.speed = "-O3 -fno-strict-aliasing"
gcc.options.size = "-Os"
@if windows:
  gcc.options.debug = "-g3 -O0 -gdwarf-3"
@else:
  gcc.options.debug = "-g3 -O0"
@end
gcc.cpp.options.speed = "-O3 -fno-strict-aliasing"
gcc.cpp.options.size = "-Os"
gcc.cpp.options.debug = "-g3 -O0"

# Configuration for the LLVM Clang compiler:
clang.options.debug = "-g"
clang.options.always = "-w"
clang.options.speed = "-O3"
clang.options.size = "-Os"
#######



@if cudnn:
  define:"cuda"
@end

# Nim cfg is not aware of new define within the file: https://github.com/nim-lang/Nim/issues/6698

@if cuda or cudnn:
  cincludes:"/opt/cuda/include"
  cc:"gcc"
  # Compilation for Cuda requires C++
  gcc.cpp.exe:"/opt/cuda/bin/nvcc"
  gcc.cpp.linkerexe:"/opt/cuda/bin/nvcc"
  gcc.cpp.options.always:"-O3 -arch=sm_61 --x cu -Xcompiler -fpermissive -Xcompiler -march=native" # Important sm_61 architecture corresponds to Pascal. Change for your own card
@end

@if openblas:
  define:"blas=openblas" # For nimblas
  define:"blas=openblas" # For nimlapack
  @if macosx:
    clibdir:"/usr/local/opt/openblas/lib"
    cincludes:"/usr/local/opt/openblas/include"
  @end
@end

# blis # Completely managed in the blis backend code

# native # -march=native flag is Handled in the code


@if mkl: # MKL multi_threaded
  define:"openmp"
  define:"blas=mkl_intel_lp64"
  define:"lapack=mkl_intel_lp64"
  clibdir:"/opt/intel/mkl/lib/intel64"
  passl:"/opt/intel/mkl/lib/intel64/libmkl_intel_lp64.a"
  passl:"-lmkl_core"
  passl:"-lmkl_gnu_thread"
  passl:"-lgomp"
  dynlibOverride:"mkl_intel_lp64"
@end

@if openmp or mkl:
  stackTrace:off
  @if macosx: # Default compiler on Mac is clang without OpenMP and gcc is an alias to clang.
              # Use Homebrew GCC instead for OpenMP support. GCC (v7), must be properly linked via `brew link gcc`
    cc:"gcc"
    gcc.exe:"/usr/local/bin/gcc-7"
    gcc.linkerexe:"/usr/local/bin/gcc-7"
  @end
@end
